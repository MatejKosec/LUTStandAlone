"""
Simple(est) verification of the interpolation implementation and skweness test
"""
import scipy as sp
import matplotlib
from mpl_toolkits.mplot3d import axes3d
from scipy import interpolate
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from matplotlib import cm
from scipy import linalg
import SU2_interp
from shutil import copyfile
import os 
import sys

Z = lambda x: sp.cos(x[0]-0.02) + sp.cos(x[1]+0.01) 
#Z = lambda x: (x[0]) + (x[1])
InternalAngle = sp.deg2rad(90);
 
quad_x = sp.array([10.0, 11.0, 11+sp.cos(InternalAngle), 10+sp.cos(InternalAngle) ])
quad_y = sp.array([10.0, 10.0, 10+sp.sin(InternalAngle), 10+sp.sin(InternalAngle) ])
quad_z = Z([quad_x, quad_y])

x_samples = sp.zeros((100,100))
y_samples = sp.zeros((100,100))
for i in range(100):
    y_samples[:,i]= sp.linspace(10,10+sp.sin(InternalAngle),100)
    x_lim = 10+(y_samples[i,0]-10)/sp.tan(InternalAngle)
    x_samples[i,:] = sp.linspace(x_lim,1+x_lim,100)
    
#The correct values 
z_samples = Z([x_samples, y_samples])
#The SciPy values
interp_points_x = sp.copy(x_samples).reshape((100*100))
interp_points_y = sp.copy(y_samples).reshape((100*100))
interp_points   = sp.column_stack((interp_points_x,interp_points_y))
scipy_interp = sp.interpolate.griddata(sp.column_stack((quad_x,quad_y)),\
quad_z,interp_points,\
            method='linear') 
scipy_interp = scipy_interp.reshape((100,100))
scipy_error  = (scipy_interp - z_samples)/z_samples
#The SU2 values
SU2_Z  = SU2_interp.interp2d(quad_x,quad_y,quad_z)
su2_interp = SU2_Z(interp_points_x,interp_points_y)
su2_interp = su2_interp.reshape((100,100))
su2_error  = (su2_interp - z_samples)/z_samples

def plot(i,zz):
    plt.figure(i, figsize=(10,10))
    plt.plot(sp.hstack((quad_x,quad_x[0])),sp.hstack((quad_y,quad_y[0])), '-g')
    plt.plot(quad_x[0],quad_y[0], 'ro')
    plt.axis('equal')
    plt.grid('on')
    plt.xlim((9,12))
    plt.ylim((9,12))
    #plt.contourf(x_samples,y_samples,z_samples,100, interpolation=None)
    plt.contourf(x_samples,y_samples,abs(zz),100, interpolation=None)
    plt.colorbar()


plot(0,z_samples)
plot(1,scipy_error)
plot(2,su2_error)
plt.figure(3)
plt.plot(sp.sort(abs(scipy_error.reshape(100*100))), label='Scipy')
plt.plot(sp.sort(abs(su2_error.reshape(100*100))),label='SU2')
plt.legend()
Test2 = sp.matrix(
[[1, 0, 0, 0, 1, 0, 0, 0],\
 [1, 0.63290000000000646, -3941.25, -2494.4171250000254, 0, 1, 0, 0],\
 [1, 0, 1801.7300000000978, 0, 0, 0, 1, 0],\
 [1, 0.63290000000000646, -2168.0899999999674, -1372.1841609999933, 0, 0, 0, 1]])
print 'Test2'
print sp.around(Test2,2)
print 'Test2 inverse'
print sp.linalg.inv(Test2[:,:4])
print 'Elimination'
GT2I =  SU2_interp.inverse(Test2,4)
print 'Gauss inverse'
print GT2I
print 'Identity test'
print sp.dot(GT2I,Test2[:,:4])


Test2 = sp.array(
[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\
[1, 0.9978987500000001, 0.9958019152515626, 0.9937094864771403, 1.001939237230769, 0.9998339124085383, 0.9977330114000899, 0.9956365249098855, 1.003882235102576, 1.001772827556067, 0.9996678524021646, 0.9975673003273047, 1.005829000908195, 1.003715502720037, 1.001606445519946, 0.9995018199762975],\
[1, 0.9978987500000001, 0.9958019152515626, 0.9937094864771403, 1.004524886876923, 1.002414128958373, 1.000307806269899, 0.9982059094919749, 1.009070248355095, 1.006949939495739, 1.004834085935374, 1.002722678312302, 1.013636177079771, 1.011506274062682, 1.009380846504308, 1.007259885000591 ],\
[1, 0.9978987500000001, 0.9958019152515626, 0.9937094864771403, 1.007110536523077, 1.004994345508208, 1.002882601139709, 1.000775294074064, 1.0142716327758, 1.01214039450743, 1.010013634503471, 1.007891343353971, 1.021483648264973, 1.019337255749057, 1.017195373340414, 1.015057991562182 ],\
[1, 1.00315125, 1.006312430376562, 1.009483572422787, 0.9993535875846153, 1.002502800577491, 1.005661937527811, 1.008831029708446, 0.9987075930182414, 1.00185477032074, 1.005011865165713, 1.008178908805817, 0.9980620160307755, 1.001207158958792, 1.004362213018461, 1.007527209442236 ],\
[1, 1.00315125, 1.006312430376562, 1.009483572422787, 1.001939237230769, 1.005096598252093, 1.008263908907335, 1.011441200550279, 1.003882235102576, 1.007045718995943, 1.010219171817929, 1.01340262498312, 1.005829000908195, 1.008998619547307, 1.012178226447155, 1.015367853083247 ],\
[1, 1.00315125, 1.006312430376562, 1.009483572422787, 1.004524886876923, 1.007690395926694, 1.010865880286858, 1.014051371392112, 1.009070248355095, 1.012250080975224, 1.015439934042897, 1.01863983913505, 1.013636177079771, 1.016830398082793, 1.020034684874752, 1.023249069175463 ],\
[1, 1.00315125, 1.006312430376562, 1.009483572422787, 1.007110536523077, 1.010284193601295, 1.013467851666382, 1.016661542233945, 1.0142716327758, 1.017467856258585, 1.02067415184062, 1.023890551261607, 1.021483648264973, 1.024702598611568, 1.027931692675443, 1.031170962421987 ],\
[1, 1.00840375, 1.016878123014063, 1.025423712540342, 0.9993535875846153, 1.00775190529628, 1.016220800370413, 1.024760865921526, 0.9987075930182414, 1.007100481953068, 1.015563902628282, 1.024098447774994, 0.9980620160307755, 1.006449479697994, 1.014907429513006, 1.023436457823776 ],\
[1, 1.00840375, 1.016878123014063, 1.025423712540342, 1.001939237230769, 1.010359284095647, 1.018850090929367, 1.027412252381014, 1.003882235102576, 1.012318610435819, 1.020825882958269, 1.02940464847218, 1.005829000908195, 1.014281736374577, 1.022805506516635, 1.031400908292024 ],\
[1, 1.00840375, 1.016878123014063, 1.025423712540342, 1.004524886876923, 1.012966662895015, 1.021479381488319, 1.030063638840502, 1.009070248355095, 1.017550222454709, 1.026101460136663, 1.034724560282287, 1.013636177079771, 1.022154522102905, 1.030744453168027, 1.039406571866338 ],\
[1, 1.00840375, 1.016878123014063, 1.025423712540342, 1.007110536523077, 1.015574041694383, 1.024108672047272, 1.032715025299989, 1.0142716327758, 1.02279531800974, 1.031390634163464, 1.040058183205316, 1.021483648264973, 1.03006794147408, 1.038724374937243, 1.047453554903122 ],\
[1, 1.013655, 1.027496459025, 1.041526923172986, 0.9993535875846153, 1.012999760823083, 1.026832272557122, 1.04085366723889, 0.9987075930182414, 1.012344945200905, 1.026168515427624, 1.040180846505788, 0.9980620160307755, 1.011690552859676, 1.025505187358975, 1.039508460692361 ],\
[1, 1.013655, 1.027496459025, 1.041526923172986, 1.001939237230769, 1.015620717515155, 1.029489018412825, 1.043546690959252, 1.003882235102576, 1.017590247022902, 1.031485441845999, 1.045570375554406, 1.005829000908195, 1.019563595915596, 1.033485736817824, 1.047597984554071 ],\
[1, 1.013655, 1.027496459025, 1.041526923172986, 1.004524886876923, 1.018241674207228, 1.032145764268527, 1.046239714679614, 1.009070248355095, 1.022849102596384, 1.036816107092338, 1.050973831034683, 1.013636177079771, 1.027477379077795, 1.041507582689102, 1.055729368730722 ],\
[1, 1.013655, 1.027496459025, 1.041526923172986, 1.007110536523077, 1.0208626308993, 1.03480251012423, 1.048932738399976, 1.0142716327758, 1.028121511921354, 1.04216051116664, 1.05639121294662, 1.021483648264973, 1.035432007482032, 1.049570831544199, 1.063902721248935 ]])

print 'Test3'
Test2 = sp.column_stack((Test2,sp.eye(16)))
print Test2
 
print 'Test3 inverse'
print sp.linalg.inv(Test2[:,:16])
print 'Elimination'
GT2I =  SU2_interp.inverse(Test2,16)
print 'Gauss inverse'
print GT2I
print 'Identity test'
print sp.dot(GT2I,Test2[:,:16])

            

